generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  extensions      = ["(function)", "pg_trgm", "(function)"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions")]
}

model User {
  id                String              @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  phoneNo           BigInt              @unique
  countryCode       BigInt
  name              String
  verified          Boolean
  createdAt         DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime            @updatedAt @db.Timestamptz(6)
  teleUsername      String?
  ownedEvents       Event[]             @relation("EventOwner")
  wonEvents         Event[]             @relation("EventWinner")
  EventParticipants EventParticipants[]
  eventUserScores   EventUserScores[]
  sessions          UserSessions[]
  joinedEvents      Event[]             @relation("EventParticipants")

  @@unique([phoneNo, countryCode])
}

model Event {
  name              String
  description       String?
  status            EventStatus
  id                String              @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ownerId           String?             @db.Uuid
  createdAt         DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime            @updatedAt @db.Timestamptz(6)
  location          String?
  startTime         DateTime            @db.Timestamptz(6)
  snatchStartTime   DateTime            @db.Timestamptz(6)
  winnerDrawnAt     DateTime?           @db.Timestamptz(6)
  winnerTicket      String?
  winnerUserId      String?             @db.Uuid
  eventType         EventType           @default(GAME)
  owner             User?               @relation("EventOwner", fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  winner            User?               @relation("EventWinner", fields: [winnerUserId], references: [id])
  EventParticipants EventParticipants[]
  eventUserScores   EventUserScores[]
  participants      User[]              @relation("EventParticipants")
}

model EventUserScores {
  id        String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  eventId   String   @db.Uuid
  userId    String   @db.Uuid
  score     BigInt
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([eventId, userId], name: "eventId_userId")
}

model EventParticipants {
  eventParticipantId String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  eventId            String   @db.Uuid
  userId             String   @db.Uuid
  hasPreReg          Boolean
  createdAt          DateTime @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime @updatedAt @db.Timestamptz(6)
  hasJoinedGiveaway  Boolean
  ticketNumber       String?
  event              Event    @relation(fields: [eventId], references: [id])
  user               User     @relation(fields: [userId], references: [id])

  @@unique([eventId, userId], name: "eventId_userId")
}

model UserSessions {
  id        String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  expiresAt DateTime @db.Timestamptz(6)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  user      User     @relation(fields: [userId], references: [id])
}

enum EventStatus {
  PENDING
  STARTED
  DELETED
  COMPLETED
}

enum EventType {
  GAME
  CHOSEN
  RANDOM
}
