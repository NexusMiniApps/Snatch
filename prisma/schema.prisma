// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  extensions      = ["(function)", "pg_trgm", "(function)"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = []
}

model User {
  id              String            @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  phoneNo         BigInt            @unique
  countryCode     BigInt
  name            String
  verified        Boolean
  createdAt       DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime          @updatedAt @db.Timestamptz(6)
  ownedEvents     Event[]           @relation("EventOwner")
  joinedEvents    Event[]           @relation("EventParticipants")
  eventUserScores EventUserScores[]
  sessions        UserSessions[]

  @@unique([phoneNo, countryCode])
}

model Event {
  id              String            @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  description     String?
  status          EventStatus
  createdAt       DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime          @updatedAt @db.Timestamptz(6)
  ownerId         String            @db.Uuid
  owner           User              @relation("EventOwner", fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  participants    User[]            @relation("EventParticipants")
  eventUserScores EventUserScores[]
  location        String?
}

model EventUserScores {
  id        String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  eventId   String   @db.Uuid
  userId    String   @db.Uuid
  score     BigInt
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

// For cookies stored for users
model UserSessions {
  id        String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  expiresAt DateTime @db.Timestamptz(6)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  user      User     @relation(fields: [userId], references: [id])
}

enum EventStatus {
  PENDING
  STARTED
  DELETED
  COMPLETED
}
